#include <WiFi.h>
#include <WebServer.h>
#include <ESPmDNS.h>

const char *ssid = "Wi-Fi-nally Connected";
const char *password = "**********";

WebServer server(80);

const int led = 13;

// Home Page with Loading Screen
void handleRoot() {
  digitalWrite(led, 1);
  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>Botworks - Home</title>
  <style>
    /* Reset and base */
    body, html {
      margin: 0; padding: 0; height: 100%; width: 100%;
      overflow: hidden;
      font-family: 'Segoe UI', 'Arial', sans-serif;
      background: url('https://i.postimg.cc/tT7C5wcy/60500432d2ddf025a57b745aa3ca3c7d.jpg') no-repeat center center fixed;
      background-size: cover;
      color: white;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    /* Loading overlay */
    #loading-screen {
      position: fixed;
      top: 0; left: 0;
      width: 100vw; height: 100vh;
      background: #000d1a;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      z-index: 9999;
      transition: opacity 1s ease;
    }

    /* Animated tech bars */
    .bars {
      display: flex;
      gap: 8px;
    }
    .bar {
      width: 10px;
      height: 40px;
      background: #00c9a7;
      border-radius: 3px;
      animation: barPulse 1.2s infinite ease-in-out;
      box-shadow: 0 0 12px #00fcca;
      transform-origin: bottom;
    }
    .bar:nth-child(1) { animation-delay: 0s; }
    .bar:nth-child(2) { animation-delay: 0.2s; }
    .bar:nth-child(3) { animation-delay: 0.4s; }
    .bar:nth-child(4) { animation-delay: 0.6s; }
    .bar:nth-child(5) { animation-delay: 0.8s; }

    @keyframes barPulse {
      0%, 100% { transform: scaleY(0.5); background: #00c9a7; box-shadow: 0 0 12px #00fcca;}
      50% { transform: scaleY(1.2); background: #00fcca; box-shadow: 0 0 24px #00fcca;}
    }

    /* Main content styles */
    h1 {
      font-size: 4em;
      color: #fff;
      text-shadow: 2px 2px 12px #0008;
      margin-bottom: 18px;
      letter-spacing: 2px;
      z-index: 1;
    }
    .perks {
      font-size: 1.2em;
      color: #ffd700;
      background: rgba(20,22,44,0.7);
      border-radius: 10px;
      padding: 8px 20px;
      margin: 10px auto 24px auto;
      box-shadow: 0 3px 18px #00c9a7;
      max-width: 600px;
      text-align: center;
      z-index: 1;
    }
    .robot-img {
      display: block;
      margin: 0 auto;
      max-width: 300px;
      max-height: 400px;
      border-radius: 22px;
      background: rgba(255,255,255,0.13);
      padding: 14px;
      box-shadow: 0 0 32px 2px #00c9a7, 0 0 80px 4px #f9f871, 0 1px 16px #0008;
      animation: robotGlow 2s alternate infinite;
      z-index: 1;
    }
    @keyframes robotGlow {
      0% {
        box-shadow: 0 0 24px 1px #00c9a7, 0 0 50px 2px #f9f871, 0 1px 16px #0008;
      }
      100% {
        box-shadow: 0 0 45px 8px #f9f871, 0 0 90px 6px #00c9a7, 0 1px 16px #0008;
      }
    }
    #trail-canvas {
      position: fixed;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      pointer-events: none;
      z-index: 10;
    }
    nav {
      position: fixed;
      top: 20px;
      right: 30px;
      z-index: 20;
    }
    nav a {
      color: #00c9a7;
      background: rgba(0,0,0,0.6);
      padding: 10px 16px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: bold;
      font-size: 1.1em;
      box-shadow: 0 0 12px #00c9a7;
      transition: background 0.3s ease;
      z-index: 20;
    }
    nav a:hover {
      background: #00c9a7;
      color: #111;
    }
  </style>
</head>
<body>
  <!-- Loading screen -->
  <div id="loading-screen">
    <div class="bars">
      <div class="bar"></div><div class="bar"></div><div class="bar"></div><div class="bar"></div><div class="bar"></div>
    </div>
    <p style="margin-top:16px; color:#00fcca; font-weight:bold; letter-spacing: 2px;">Loading Botworks...</p>
  </div>

  <canvas id="trail-canvas"></canvas>

  <nav>
    <a href="/botparts">See Bot Parts</a>
  </nav>
  <h1>Botworks</h1>
  <div class="perks">Perks: <b>AI Core</b>, <b>Sensors</b>, <b>Circuits</b>, <b>Gears</b>, <b>Glow Module</b>, <b>Wave Antenna</b></div>
  <img class="robot-img" src="https://i.postimg.cc/2SrN0nZ5/Cute-3d-Robot-Say-Hello-PNG-Images-PSD-Free-Download-Pikbest-removebg-preview.png" alt="Cute Robot" />

  <script>
    // Loading screen fade out after delay
    window.addEventListener('load', () => {
      const loadingScreen = document.getElementById('loading-screen');
      setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
          loadingScreen.style.display = 'none';
        }, 1000);
      }, 2500); // minimum loading screen time
    });

    // Mouse trail
    const canvas = document.getElementById('trail-canvas');
    const ctx = canvas.getContext('2d');
    let w = window.innerWidth, h = window.innerHeight;
    canvas.width = w; canvas.height = h;
    let points = [];
    document.addEventListener('mousemove', (e) => {
      points.push({x:e.clientX,y:e.clientY,t:Date.now()});
    });
    function drawTrail(){
      ctx.clearRect(0,0,w,h);
      let now = Date.now();
      points = points.filter(pt => now-pt.t < 1000);
      for(let i=0;i<points.length;i++){
        let age=now-points[i].t, alpha=0.4*(1-age/1000), radius=15-age/80;
        let grad=ctx.createRadialGradient(points[i].x,points[i].y,radius*0.3,points[i].x,points[i].y,radius);
        grad.addColorStop(0,`rgba(255,255,255,${alpha})`);
        grad.addColorStop(0.6,`rgba(0,201,167,${alpha*0.7})`);
        grad.addColorStop(1,`rgba(0,201,167,0)`);
        ctx.beginPath(); ctx.fillStyle=grad;
        ctx.arc(points[i].x,points[i].y,radius,0,Math.PI*2); ctx.fill();
      }
      requestAnimationFrame(drawTrail);
    }
    drawTrail();
    window.addEventListener('resize',()=>{
      w=window.innerWidth; h=window.innerHeight; canvas.width=w; canvas.height=h;
    });
  </script>
</body>
</html>
  )rawliteral";
  server.send(200, "text/html", html);
  digitalWrite(led, 0);
}

// Bot Parts Page with Loading Screen and Images
void handleBotParts() {
  digitalWrite(led, 1);
  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <title>Botworks - Bot Parts</title>
  <style>
    body, html {
      margin: 0; padding: 0; height: 100%; width: 100%;
      overflow: hidden;
      font-family: 'Segoe UI', 'Arial', sans-serif;
      background: linear-gradient(135deg,#081f4a,#0a3940);
      color: white;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 40px 20px 60px;
    }

    /* Loading overlay */
    #loading-screen {
      position: fixed;
      top: 0; left: 0;
      width: 100vw; height: 100vh;
      background: #000d1a;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      z-index: 9999;
      transition: opacity 1s ease;
    }

    /* Animated tech bars */
    .bars {
      display: flex;
      gap: 8px;
    }
    .bar {
      width: 10px;
      height: 40px;
      background: #00c9a7;
      border-radius: 3px;
      animation: barPulse 1.2s infinite ease-in-out;
      box-shadow: 0 0 12px #00fcca;
      transform-origin: bottom;
    }
    .bar:nth-child(1) { animation-delay: 0s; }
    .bar:nth-child(2) { animation-delay: 0.2s; }
    .bar:nth-child(3) { animation-delay: 0.4s; }
    .bar:nth-child(4) { animation-delay: 0.6s; }
    .bar:nth-child(5) { animation-delay: 0.8s; }

    @keyframes barPulse {
      0%, 100% { transform: scaleY(0.5); background: #00c9a7; box-shadow: 0 0 12px #00fcca;}
      50% { transform: scaleY(1.2); background: #00fcca; box-shadow: 0 0 24px #00fcca;}
    }

    h1 {
      font-size: 3.5em;
      margin-bottom: 24px;
      text-shadow: 2px 2px 10px #00c9a7;
      letter-spacing: 1.5px;
      z-index: 1;
    }
    nav {
      position: fixed;
      top: 20px;
      right: 30px;
      z-index: 20;
    }
    nav a {
      color: #00c9a7;
      background: rgba(0,0,0,0.6);
      padding: 10px 16px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: bold;
      font-size: 1.1em;
      box-shadow: 0 0 12px #00c9a7;
      transition: background 0.3s ease;
      z-index: 20;
    }
    nav a:hover {
      background: #00c9a7;
      color: #111;
    }

    .grid-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 30px;
      width: 100%;
      max-width: 1000px;
      z-index: 1;
    }
    .box {
      background: #062b4d;
      border-radius: 15px;
      padding: 24px 20px;
      box-shadow: 0 0 15px 2px #00c9a7;
      text-align: center;
      transition: transform 0.3s ease;
      position: relative;
      overflow: hidden;
      cursor: default;
      animation: glowPulse 3s ease-in-out infinite alternate;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .box:hover {
      transform: scale(1.05);
      box-shadow: 0 0 30px 6px #00fcca;
    }
    .box img {
      max-width: 80px;
      max-height: 80px;
      margin-bottom: 12px;
      filter: drop-shadow(0 0 4px #00fcca);
    }
    .box h2 {
      margin: 0 0 12px;
      font-size: 1.4em;
      letter-spacing: 1px;
      text-shadow: 1px 1px 6px #00c9a7;
    }
    .box p {
      font-size: 1em;
      line-height: 1.3;
      color: #b0e8dd;
    }
    @keyframes glowPulse {
      0% {
        box-shadow: 0 0 12px 2px #00c9a7;
      }
      100% {
        box-shadow: 0 0 30px 8px #00fcca;
      }
    }

    #trail-canvas {
      position: fixed;
      left: 0; top: 0;
      width: 100vw; height: 100vh;
      pointer-events: none;
      z-index: 5;
    }
  </style>
</head>
<body>
  <!-- Loading screen -->
  <div id="loading-screen">
    <div class="bars">
      <div class="bar"></div><div class="bar"></div><div class="bar"></div><div class="bar"></div><div class="bar"></div>
    </div>
    <p style="margin-top:16px; color:#00fcca; font-weight:bold; letter-spacing: 2px;">Loading Bot Parts...</p>
  </div>

  <canvas id="trail-canvas"></canvas>
  <nav>
    <a href="/">Back to Home</a>
  </nav>
  <h1>Bot Parts</h1>
  <div class="grid-container">
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/3209/3209731.png" alt="Processor Icon" />
      <h2>Processor</h2>
      <p>The brain of the bot: executes instructions and processes data.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/1055/1055687.png" alt="Microcontroller Icon" />
      <h2>Microcontroller</h2>
      <p>Embedded controller managing sensors and actuators.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/1230/1230557.png" alt="Actuator Icon" />
      <h2>Actuator</h2>
      <p>Mechanism for movement/control of limbs.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/497/497585.png" alt="Sensor Icon" />
      <h2>Sensors</h2>
      <p>Detect environmental inputs: temperature, motion, light.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/2099/2099078.png" alt="Circuits Icon" />
      <h2>Circuits</h2>
      <p>Electronic pathways connecting components.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/2933/2933120.png" alt="Gears Icon" />
      <h2>Gears</h2>
      <p>Mechanical parts for torque and motion adjustment.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/581/581551.png" alt="Glow Module Icon" />
      <h2>Glow Module</h2>
      <p>Illumination and status indication.</p>
    </div>
    <div class="box">
      <img src="https://cdn-icons-png.flaticon.com/512/2914/2914831.png" alt="Wave Antenna Icon" />
      <h2>Wave Antenna</h2>
      <p>Wireless data transmission and reception.</p>
    </div>
  </div>
  <script>
    // Loading screen fade out after delay
    window.addEventListener('load', () => {
      const loadingScreen = document.getElementById('loading-screen');
      setTimeout(() => {
        loadingScreen.style.opacity = '0';
        setTimeout(() => {
          loadingScreen.style.display = 'none';
        }, 1000);
      }, 2500);
    });

    // Mouse trail
    const canvas = document.getElementById('trail-canvas');
    const ctx = canvas.getContext('2d');
    let w = window.innerWidth, h = window.innerHeight;
    canvas.width = w; canvas.height = h;
    let points = [];
    document.addEventListener('mousemove', (e) => {
      points.push({x:e.clientX,y:e.clientY,t:Date.now()});
    });
    window.addEventListener('resize',()=>{
      w=window.innerWidth; h=window.innerHeight; canvas.width=w; canvas.height=h;
    });
  </script>
</body>
</html>
  )rawliteral";
  server.send(200, "text/html", html);
  digitalWrite(led, 0);
}

void handleNotFound() {
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: " + server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: " + String(server.args()) + "\n";
  for (uint8_t i = 0; i < server.args(); i++)
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(void) {
  pinMode(led, OUTPUT); digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.mode(WIFI_STA); WiFi.begin(ssid, password);
  Serial.println("");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to "); Serial.println(ssid);
  Serial.print("IP address: "); Serial.println(WiFi.localIP());
  if (MDNS.begin("esp32")) Serial.println("MDNS responder started");

  server.on("/", handleRoot);
  server.on("/botparts", handleBotParts);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
}

void loop(void) {
  server.handleClient();
  delay(2);
}
